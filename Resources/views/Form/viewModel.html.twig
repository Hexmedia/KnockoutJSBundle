{% block form_widget %}
{% spaceless %}
    <div {{ block('widget_container_attributes') }}>
        {{ block('field_rows') }}
        {{ form_rest(form) }}
    </div>

    {% if knockout is defined and knockout.enabled == true %}
        {{ _self.viewModel(knockout.viewModel) }}
    {% endif %}
{% endspaceless %}
{% endblock form_widget %}

{% block knockout_widget %}
{% spaceless %}
    {% if prototype is defined %}
        <script id="{{ id }}_template" type="text/html">
            <tr>
            {% for name, field in prototype %}
                <td>
                {{ form_widget(field, { attr: { 'data-bind': 'value: ' ~ name ~ ', uniqueId: ' ~ name } }) }}
                </td>
            {% endfor %}
                <td><button type="button" class="btn" data-bind="click: remove">{% trans %}knockout.remove{% endtrans %}</button></td>
            </tr>
        </script>
    {% endif %}

    <table class="table">
        <thead>
            <tr>
            {% for name, field in prototype %}
                <th>
                    {{ form_label(field) }}
                </th>
            {% endfor %}
                <th><button type="button" class="btn" data-bind="click: create{{ name|capitalize }}">{% trans %}knockout.add{% endtrans %}</button></th>
            </tr>
        </thead>
        <tbody data-bind="template: { name: '{{ id }}_template', foreach: items, afterRender: incCounter }">
        </tbody>
    </table>
{% endspaceless %}
{% endblock knockout_widget %}

{% macro viewModel(params) %}
<script>
$(document).ready(function () {
    {% for id, binding in params.bindings %}
        $("#{{ params.name }}_{{ id }}").attr('data-bind', "{{ binding }}");
    {% endfor %}

    ko.bindingHandlers.uniqueId = {
        init: function(element, valueAccessor) {
            var counter = {{ params.name }}ViewModel.counter;

            element.id = element.id.replace(/_id_/g, counter);
            element.name = element.name.replace(/_id_/g, counter);
        }
    };

    var {{ params.name }}ViewModel = {
            {{ _self.viewModelFields(params.fields, params.collections, params.name)|raw }},
            {{ _self.viewModelMethods(params.fields, params.collections)|raw }}
        };


    {{ _self.viewModelFunctions(params.name, params.fields, params.collections)|raw }}

    ko.applyBindings({{ params.name }}ViewModel);
});
</script>
{% endmacro %}

{% macro viewModelFields(fields, collections, modelName) %}
counter: 0,
incCounter: function() {
    {{ modelName }}ViewModel.counter++;
},
    {% for name, value in fields %}
        {% spaceless %}
            {{ name }} :
            {% if value is iterable %}
                {% if collections[name] is defined %}
                    ko.observableArray([
                        {% for v in value %}
                            new {{name}}({% for cname, field in collections[name] %}'{{v[cname]}}'{% if not loop.last %},{% endif %} {% endfor %})
                            {% if not loop.last %}
                                ,
                            {% endif %}
                        {% endfor %}
                    ])
                {% else %}
                    { {{ _self.viewModelFields(value) }} }
                {% endif %}
            {% else %}
                ko.observable("{{ value }}")
            {% endif %}
            {% if not loop.last %}
                ,
            {% endif %}
        {% endspaceless %}
    {% endfor %}
{% endmacro %}

{% macro viewModelMethods(fields, collections) %}
    {% for name, value in collections %}
        create{{ name|capitalize }}: function() {
            this.{{name}}.push(new {{name}}());
        }
    {% endfor %}
{% endmacro %}

{% macro viewModelFunctions(vmname, fields, collections) %}
    {% for name, value in collections %}
        function {{ name }}({% for k, v in value %}{{k}}{% if not loop.last %},{% endif %} {% endfor %}) {
            return {
                {% for k, v in value %}
                    '{{ k }}' : ko.observable({{ k }}),
                {% endfor %}
                remove: function() {
                    {{ vmname }}ViewModel.{{name}}.remove(this);
                }
            };
        }
    {% endfor %}
{% endmacro %}
